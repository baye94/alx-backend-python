pipeline {
    agent any

    stages {
        stage('Checkout Source Code') {
            steps {
                // Assuming the repository URL and credentials are configured in the Jenkins job
                // The 'git' step here pulls the entire repository.
                // If the Jenkins job is configured to use 'Pipeline script from SCM',
                // Jenkins automatically performs a checkout.
                // You might not need an explicit `git` step here if the Jenkins job handles it,
                // but it's good for clarity or if you need specific checkout options.
                script {
                    checkout scm
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                // Ensure to navigate into the messaging_app directory
                dir('messaging_app') {
                    sh 'python3 -m venv venv' // Create a virtual environment
                    sh '. venv/bin/activate && pip install -r requirements.txt' // Activate and install dependencies
                }
            }
        }

        stage('Run Tests with Pytest') {
            steps {
                dir('messaging_app') {
                    // Activate the virtual environment and run pytest
                    // --junitxml=report.xml: Generates a JUnit XML report (standard for Jenkins)
                    // --html=report.html: Generates an HTML report (optional, requires pytest-html)
                    sh '. venv/bin/activate && pytest --junitxml=test-results.xml --html=test-report.html'
                }
            }
        }

        stage('Generate Test Report') {
            steps {
                dir('messaging_app') {
                    // Publish JUnit test results
                    // This will parse the test-results.xml and display results in Jenkins UI
                    junit 'test-results.xml'

                    // Archive the HTML report (optional, if you want to view it later)
                    archiveArtifacts artifacts: 'test-report.html', fingerprint: true
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace after build, good for subsequent builds
            cleanWs()
        }
        success {
            echo 'Pipeline finished successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}